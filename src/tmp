import * as readlineSync from 'readline-sync';
import * as commander from 'commander';

// import necessary libraries

// SET ENV VARIABLES
///////////////////////////////////////////////////////////////////////////
process.env.SF_SKIP_NEW_VERSION_CHECK = 'true';
process.env.FORCE_SHOW_SPINNER = 'true';
process.env.SF_CAPITALIZE_RECORD_TYPES = 'true';

// SET FOLDER
///////////////////////////////////////////////////////////////////////////
const folder = __dirname.split('/').pop();
if (folder === 'scripts') {
  process.chdir('..');
}
console.clear();

console.log('Starting...\n');

function displayCenter(text: string) {
  const columns = process.stdout.columns;
  const formattedText = text.replace(/(.{1,columns})/g, '$1\n');
  console.log(formattedText);
}

function printHeader(text: string) {
  console.log('\n\n');
  console.log('-'.repeat(process.stdout.columns || 80));
  displayCenter(text);
  console.log('-'.repeat(process.stdout.columns || 80));
}

// CHECK DEVHUB
///////////////////////////////////////////////////////////////////////////
function authDevhub() {
  console.log('\nSet a DevHub alias:');
  const devhub = readlineSync.question('Alias: ');
  // run auth:devhub command
}

function chooseDevhub() {
  console.log('');
  // run org:list command and display the result in a table
  console.log('\nChoose a DevHub (production login):');
  const devhub = readlineSync.question('Alias: ');
  console.log('');
  // run config:set command to set target-dev-hub
}

function devhubLogin() {
  console.log('\nDevHub not authenticated. Do one of the following:');

  const options = [
    'Authenticate DevHub (by logging into production)',
    'Choose existing DevHub',
  ];
  const index = readlineSync.keyInSelect(options, 'Select an option:');

  switch (index) {
    case 0:
      authDevhub();
      break;
    case 1:
      chooseDevhub();
      break;
  }
}

// check if devhub is set
const devhub = ''; // get devhub from config
if (devhub === null) {
  devhubLogin();
}

// CHECK SECRETS
///////////////////////////////////////////////////////////////////////////
const unlockedPackages = []; // parse sfdx-project.json and get unlocked packages
if (unlockedPackages.length > 0) {
  const secretFile = '.ssdx/.packageKey';
  if (!fs.existsSync(secretFile)) {
    console.log('\nPackage Key is missing.');
    const secret = readlineSync.question('What is the value? ');
    fs.mkdirSync('.ssdx', { recursive: true });
    fs.writeFileSync(secretFile, secret);
    console.log('');
  }
}

// SCRATCH ORG NAME AND DURATION
///////////////////////////////////////////////////////////////////////////
let scratchOrg = '';
let durationDays = 5;

// Parse command-line options
commander
  .option('-n, --scratch-org-name <name>', 'Scratch org name')
  .option('-d, --duration-in-days <days>', 'Duration in days')
  .parse(process.argv);

scratchOrg = commander.scratchOrgName || '';
durationDays = parseInt(commander.durationInDays) || 5;

if (!scratchOrg) {
  printHeader('Scratch Org Name');
  console.log('');
  scratchOrg = readlineSync.question('Scratch org name: ');
}

// DELETE OLD ORG
///////////////////////////////////////////////////////////////////////////
const oldScratchOrg = ''; // get target-org from config

function deleteExistingOrg() {
  printHeader(`Deleting Scratch Org named '${oldScratchOrg}'`);
  // run org delete command
  console.log('âœ… Done');
}

if (oldScratchOrg !== null) {
  const list = ''; // run org list command and filter the result

  if (list.length > 0) {
    printHeader('Delete old Scratch Org');
    console.log('');
    const answer = readlineSync.keyInYNStrict(
      `Do you want to delete the existing Scratch Org? (${oldScratchOrg})`
    );
    if (answer) {
      deleteExistingOrg();
    }
  }
}

// CREATE SCRATCH ORG
///////////////////////////////////////////////////////////////////////////
function createScratchOrgFromSnapshot() {
  const snapshot = ''; // parse project-scratch-def-snapshot.json and get the snapshot value
  printHeader(
    `Creating Scratch Org named '${scratchOrg}' from snapshot '${snapshot}' with duration ${durationDays} days`
  );
  // run org create command with definition-file and other options
  console.log(
    "List<User> user = [SELECT Id FROM User WHERE Name = 'User User' LIMIT 1]; user[0].LanguageLocaleKey = 'en_US'; update user;" >
      language.apex
  );
  // run apex:run command to update user language
  fs.unlinkSync('language.apex');
}

function createNormalScratchOrg() {
  printHeader(
    `Creating Scratch Org named '${scratchOrg}' with duration ${durationDays} days`
  );
  // run org create command with definition-file and other options
}

const snapshotFile = './config/project-scratch-def-snapshot.json';
if (fs.existsSync(snapshotFile)) {
  printHeader('Scratch Org Creation');
  console.log('');
  const answer = readlineSync.keyInYNStrict(
    'Do you want to create a Scratch Org from a Snapshot?'
  );
  if (answer) {
    createScratchOrgFromSnapshot();
  } else {
    createNormalScratchOrg();
  }
} else {
  createNormalScratchOrg();
}

// DURATION START
///////////////////////////////////////////////////////////////////////////
let seconds = 0;
const startTime = process.hrtime();

// INSTALLING DEPENDENCIES
///////////////////////////////////////////////////////////////////////////
if (unlockedPackages.length > 0) {
  const secrets = unlockedPackages
    .map(dependency => {
      const packageName = ''; // get package name from dependency
      const key = fs.readFileSync('.ssdx/.packageKey', 'utf8');
      return `${packageName}:${key}`;
    })
    .join(' ');

  printHeader('Installing Unlocked Packages');
  const devhubUsername = ''; // get target-dev-hub from config
  // run dependency:install command with installationkeys and other options
}

// INSTALLING MANAGED PACKAGES
///////////////////////////////////////////////////////////////////////////
const managedPackages = []; // parse ssdx-config.json and get managed packages

if (managedPackages.length > 0) {
  printHeader('Installing Managed Packages');
  for (const packageId of managedPackages) {
    console.log(`  - Installing ${packageId}`);
    // run package install command for each packageId
  }
  console.log('âœ… Done');
}

// PUSHING METADATA
///////////////////////////////////////////////////////////////////////////
printHeader('Pushing Metadata');
// run project:deploy:start command with ignore-conflicts and concise options

// OPENING ORG
///////////////////////////////////////////////////////////////////////////
// run org open command and get the org URL

// ASSIGNING PERMSETS
///////////////////////////////////////////////////////////////////////////
const permsets = []; // parse ssdx-config.json and get permsets to assign

if (permsets.length > 0) {
  printHeader('Sleeping for 30 seconds ðŸ˜´');
  // sleep for 30 seconds

  printHeader('Assigning Permission Set');
  for (const permset of permsets) {
    console.log(`  - Assigning ${permset}`);
    // run force user permset assign command for each permset
  }
}

// DURATION
///////////////////////////////////////////////////////////////////////////
const endTime = process.hrtime(startTime);
const duration = Math.round(endTime[0] * 1000 + endTime[1] / 1000000);
printHeader('ðŸš€ Done');
console.log(
  `Org is ready! (${Math.floor(duration / 60000)} minutes and ${
    (duration / 1000) % 60
  } seconds elapsed)`
);
